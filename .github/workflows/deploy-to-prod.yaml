name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt-hotspot'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up environment variables
        run: |
          echo "AWS_DB_URL=${{ secrets.AWS_DB_URL }}" >> $GITHUB_ENV
          echo "AWS_DB_USERNAME=${{ secrets.AWS_DB_USERNAME }}" >> $GITHUB_ENV
          echo "AWS_DB_PASSWORD=${{ secrets.AWS_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_ECR=${{ secrets.AWS_ECR }}" >> $GITHUB_ENV
          echo "ECS_CLUSTER=${{ secrets.ECS_CLUSTER }}" >> $GITHUB_ENV
          echo "ECS_SERVICE=${{ secrets.ECS_SERVICE }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag and push image to Amazon ECR
        id: build-image
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR }}
          docker build \
          --build-arg AWS_DB_URL="${{ secrets.AWS_DB_URL }}" \
          --build-arg AWS_DB_USERNAME="${{ secrets.AWS_DB_USERNAME }}" \
          --build-arg AWS_DB_PASSWORD="${{ secrets.AWS_DB_PASSWORD }}" \
          -t ${{ secrets.AWS_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ secrets.AWS_REPOSITORY }}:${{ github.sha }} ${{ secrets.AWS_ECR }}/${{ secrets.AWS_REPOSITORY }}:${{ github.sha }}
          docker push ${{ secrets.AWS_ECR }}/${{ secrets.AWS_REPOSITORY }}:${{ github.sha }}
          echo "::set-output name=image::${{ secrets.AWS_ECR }}/${{ secrets.AWS_REPOSITORY }}:${{ github.sha }}"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition bookreviewstask \
          --query taskDefinition > task-definition.json

      - name: Read task-definition.json
        run: cat task-definition.json

      - name: Update task-definition.json
        run: echo "`jq '.containerDefinitions[0].image="${{ steps.build-image.outputs.image }}"' task-definition.json`" > task-definition.json

      - name: Read task-definition.json
        run: cat task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: task-definition.json
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}

      - name: Force redeploy
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER}} --service ${{ secrets.ECS_SERVICE }} --region ${{ secrets.AWS_REGION }} --force-new-deployment
